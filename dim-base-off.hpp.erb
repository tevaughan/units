/// @file       vnix/units/dim-base-off.hpp
/// @brief      Definition of dim_base_off.
/// @copyright  2019 Thomas E. Vaughan; all rights reserved.
/// @license    BSD three-clause; see LICENSE.

// THIS FILE IS GENERATED FROM 'dim-base-off.hpp.erb'.

#ifndef VNIX_UNITS_DIM_BASE_OFF_HPP
#define VNIX_UNITS_DIM_BASE_OFF_HPP

#include <array>

namespace vnix {
namespace units {


/// Enumeration of offsets, one for each base dimension in class dim.
template <typename T> struct basic_dim_base_off {
  /// C-style enumeration of offsets.
  enum off : T {
<% for i in yml["basis"] %>
     <%= i["dim"] %>, ///< Offset of rational exponent for <%= i["dim"] %>.
<% end %>
  };

  off offset; ///< Allow declaration of meaningful instance of dim_base_off.

  /// Automatically convert instance to type of enum.
  constexpr operator off() const { return offset; }

  /// Allow construction of constant-expression instance.
  constexpr basic_dim_base_off(off os) : offset(os) {}

  /// Number of offsets.
  constexpr static T num_offs = <%= yml["basis"].size %>;

  /// Array of enumerated offsets for iterating.
  constexpr static off const array[num_offs] = {
<% for i in yml["basis"] %>
<%= i["dim"] %>
<% %>,<% %>
<% end %>
};

  /// Array of basis-dimension symbols, one for each offset.
  constexpr static char const *const sym[num_offs] = {
<% for i in yml["basis"] %>
<% %>"<%= i["sym"] %>",<% %>
<% end %>
};
};

template <typename T>
constexpr typename basic_dim_base_off<T>::off const
basic_dim_base_off<T>::array[basic_dim_base_off<T>::num_offs];

template <typename T>
constexpr char const *const
basic_dim_base_off<T>::sym[basic_dim_base_off<T>::num_offs];

using dim_base_off = basic_dim_base_off<uint_fast8_t>;

} // namespace units
} // namespace vnix

#endif // ndef VNIX_UNITS_DIM_BASE_OFF_HPP
