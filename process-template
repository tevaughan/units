#!/usr/bin/env ruby


# Print information about usage of program.
def usage
  print "\n"
  print "usage: #{$0} <data>.yml <out-file-name>.erb\n"
  print "\n"
  print "Read '<out-file-name>.erb' and '<data>.yml'.\n"
  print "Make data available to erb template via variable 'yml'.\n"
  print "Process template, and write result to file '<out-file-name>'.\n"
  print "\n"
end


require 'erb'   # for ERB
require 'yaml'  # for YAML


# Process command-line arguments.
ymlfile = nil
erbfile = nil
ARGV.each do |a|
  if ymlfile.nil? && a =~ /\.yml$/
    ymlfile = a
  elsif erbfile.nil? && a =~ /\.erb$/
    erbfile = a
  else
    usage
    raise "Unexpected argument #{a}."
  end
end
if ymlfile.nil?
  usage
  raise "No YAML-file specified."
end
if erbfile.nil?
  usage
  raise "No erb-file specified."
end


# Read YAML data.
yml = YAML.load(File.read(ymlfile))
if yml.nil?
  raise "no data in '#{ymlfile}'"
end


# Read ERB template.
#
# The second and third arguments to new(), and the third argument in
# particular, tell ERB to remove the newline otherwise generated for every line
# starting with '<%' and ending with '%>'.
erb = ERB.new(File.read(erbfile), nil, '<>')
if erb.nil?
  raise "no data in '#{erbfile}'"
end


# Write result to '<out-file-name>'.
puts "erbfile='#{erbfile}'"
m = erbfile.match(/(.*)\.erb/);
out_file = m[1];
File.open(out_file, 'w') do |f|
  f.write erb.result
end


# vim: set tw=79 sw=2 expandtab:
