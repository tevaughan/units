#!/usr/bin/env perl

# Copyright 2019  Thomas E. Vaughan
# Distributable under the terms of the GNU GPL, Version 3 or later.

# Read 'dimensions.txt' and write 'dimensions.hpp', which will contain a
# collection of alias (C++ 'using') definitions.  Each of these aliases gives a
# convenient name to a value with a particular dimension.  Each alias has a
# name like 'length', 'time', 'force', etc.

use strict;

open(my $iput, '<', "dimensions.txt");
open(my $oput, '>', "dimensions.hpp");

# Write first few lines of C++ header file.
print $oput <<'EOF';

// DO NOT EDIT!
// This file was generated by the 'dimensions' executable.

/// \file   dimensions.hpp
/// \brief  Automatically generated source for generic-dimension types.

#ifndef NUMERIC_DIMENSIONS_HPP
#define NUMERIC_DIMENSIONS_HPP

#include "dimval.hpp"

namespace num {
EOF
# Done writing first few lines of C++ header file.

# Process every line of input file.
while(<$iput>) {
   s/#.*$//;         # Strip comment, which starts with '#' character.
   next if /^\s*$/;  # Skip blank line.
   # Split line into its elements.  The first element is the name of the
   # dimension.  Each of the remaining elements is the integer exponent of a
   # fundamental dimension.  In order, the fundamental dimensions are time,
   # length, mass, charge, and temperature.
   my($nam, $tim, $len, $mas, $chg, $tmp) = split;
   # Write C++ alias definition into header file.
   print $oput "/// Alias for generic dimensioned quantity.\n";
   print $oput "using $nam = statdim<$tim, $len, $mas, $chg, $tmp>;\n";
}

# Write last few lines of C++ header file.
print $oput <<'EOF';
}

#endif // ndef NUMERIC_DIMENSIONS_HPP

EOF
# Done writing last two lines of C++ header file.

