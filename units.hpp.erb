/// @file   vnix/units.hpp
///
/// @brief  Definition of various units in namespaces
///         vnix::units::flt,
///         vnix::units::dbl, and
///         vnix::units::ldbl.

#ifndef VNIX_UNITS_HPP
#define VNIX_UNITS_HPP

#include <vnix/units/dimval.hpp>

namespace vnix {
namespace units {

<%
max_dim_len = 0
for i in yml["basis"]
  if i["dim"].length > max_dim_len
    max_dim_len = i["dim"].length
  end
end

class Scale
  attr_reader :name, :valu
  def initialize(sym)
    case sym
    when "P"
      @name = "peta"
      @valu = 1.0E+15
    when "T"
      @name = "tera"
      @valu = 1.0E+12
    when "G"
      @name = "giga"
      @valu = 1.0E+09
    when "M"
      @name = "mega"
      @valu = 1.0E+06
    when "k"
      @name = "kilo"
      @valu = 1.0E+03
    when "h"
      @name = "hecto"
      @valu = 1.0E+02
    when "da"
      @name = "deca"
      @valu = 1.0E+01
    when "d"
      @name = "deci"
      @valu = 1.0E-01
    when "c"
      @name = "centi"
      @valu = 1.0E-02
    when "m"
      @name = "milli"
      @valu = 1.0E-03
    when "mu"
      @name = "micro"
      @valu = 1.0E-06
    when "n"
      @name = "nano"
      @valu = 1.0E-09
    when "p"
      @name = "pico"
      @valu = 1.0E-12
    when "f"
      @name = "femto"
      @valu = 1.0E-15
    else
      raise "illegal symbol #{sym}"
    end
  end
end
%>
<% for i in yml["basis"]                  %>
<%   first = 1                            %>
<%   d = i["dim"]                         %>
<%   d = " "*(max_dim_len - d.length) + d %>
<% %>constexpr dim <%= d %>_dim(<% %>
<%   for j in yml["basis"]                %>
<%= first == 1 ? "" : "," %><%= i == j ? 1 : 0 %>
<%     first = 0                          %>
<%   end                                  %>
); ///< Exponents for <%= d %>.
<% end                                    %>


/// Template structs that user need not ever use.  Each template struct defined
/// in impl is called by a vnix::units function whose name is the same as the
/// struct.
namespace impl {

<% for i in yml["basis"]                                %>
<%   c = i["ctor"]                                      %>
<%   d = i["dim"] + "_dim"                              %>
<%   p = "basic_statdim<#{d}.encode(), T>"              %>
/// Template used to construct a number of <%= c %>.
/// @tparam T  Numeric type (float, double, etc.).
template <typename T>
struct <%= c %> : public <%= p %> {
  /// Initialize from number of <%= c %>.
  constexpr <%= c %>(T v) :
    <%= p %>(v, <%= d %>) {}
};

/// Template-variable for symbol for <%= c %>.
/// @tparam T  Numeric type (float, double, etc.).
template <typename T> constexpr <%= c %><T> <%= i["sym"] %>(T(1));

<%   for j in i["scales"]                               %>
<%     sc = Scale.new(j).name + c                       %>
<%     sf = Scale.new(j).valu                           %>
<%     ss = j + i["sym"]                                %>
/// Template used to construct a number of <%= sc %>.
/// @tparam T  Numeric type (float, double, etc.).
template <typename T>
struct <%= sc %> : public <%= p %> {
  /// Initialize from number of <%= c %>.
  constexpr <%= sc %>(T v) :
    <%= p %>(<%= sf %>*v, <%= d %>) {}
};

/// Template-variable for symbol for <%= sc %>.
/// @tparam T  Numeric type (float, double, etc.).
template <typename T> constexpr <%= sc %><T> <%= ss %>(T(1));

<%   end                                                %>
<% end                                                  %>
<% for i in yml["derivatives"]["units"]                 %>
<%   c = i["ctor"]                                      %>
<%   m = i["sym"].match(/(\S+)\s*=\s*(\S+)/)            %>
<%   s = m[1]  # Symbol.                                %>
<%   e = m[2].gsub(/([_A-Za-z][_A-Za-z0-9]*)/, '\1<T>') %>
/// Template-variable for symbol for <%= c %>.
template <typename T> constexpr auto <%= s %> = <%= e %>;

<%   for j in i["scales"]                               %>
<%     sc = Scale.new(j).name + c                       %>
<%     sf = Scale.new(j).valu                           %>
<%     ss = j + s                                       %>
/// Template-variable for symbol for <%= sc %>.
template <typename T> constexpr auto <%= ss %> = <%= sf %>*<%= s %><T>;

<%   end                                                %>
<% end                                                  %>
} // namespace impl


<% for i in yml["basis"]                       %>
<%   c = i["ctor"]                             %>
<%   d = i["dim"] + "_dim"                     %>
<%   p = "basic_statdim<#{d}.encode(), T>"     %>
/// Produce dimensioned quantity from number of <%= c %>.
/// @tparam T  Numeric type stored in dimensioned quantity.
/// @param  v  Number of <%= c %>
template <typename T>
constexpr auto <%= c %>(T v) { return impl::<%= c %><T>(v); }

<%   for j in i["scales"]                      %>
<%     sc = Scale.new(j).name + c              %>
/// Produce dimensioned quantity from number of <%= sc %>.
/// @tparam T  Numeric type stored in dimensioned quantity.
/// @param  v  Number of <%= sc %>
template <typename T>
constexpr auto <%= sc %>(T v) { return impl::<%= sc %><T>(v); };

<%   end                                       %>
<% end                                         %>
<% for i in yml["derivatives"]["units"]        %>
<%   c = i["ctor"]                             %>
<%   m = i["sym"].match(/(\S+)\s*=\s*(\S+)/)   %>
<%   s = m[1]  # Symbol.                       %>
/// Produce dimensioned quantity from number of <%= c %>.
/// @tparam T  Numeric type stored in dimensioned quantity.
/// @param  v  Number of <%= c %>.
template <typename T>
constexpr auto <%= c %>(T v) { return v*impl::<%= s %><T>; }

<%   for j in i["scales"]                      %>
<%     sc = Scale.new(j).name + c              %>
<%     sf = Scale.new(j).valu                  %>
<%     ss = j + s                              %>
/// Produce dimensioned quantity from number of <%= sc %>.
/// @tparam T  Numeric type stored in dimensioned quantity.
/// @param  v  Number of <%= sc %>.
template <typename T>
constexpr auto <%= sc %>(T v) { return v*impl::<%= ss %><T>; }

<%   end                                       %>
<% end                                         %>

/// Single-precision dimensions and units.
namespace flt {

using dyndim = basic_dyndim<float>;

<% for i in yml["basis"]                       %>
<%   c = i["ctor"]                             %>
<%   d = i["dim"] + "_dim"                     %>
<%   p = "basic_statdim<#{d}.encode(), float>" %>
constexpr auto operator"" _<%= i["sym"] %>(long double v) {
  return <%= c %>(float(v));
}

constexpr auto <%= i["sym"] %> = impl::<%= i["sym"] %><float>;
using <%= i["dim"] %> = <%= p %>;

<%   for j in i["scales"]                      %>
<%     sc = Scale.new(j).name + c              %>
<%     ss = j + i["sym"]                       %>
constexpr auto operator"" _<%= ss %>(long double v) {
  return <%= sc %>(float(v));
}

constexpr auto <%= ss %> = impl::<%= ss %><float>;

<%   end                                       %>
<% end                                         %>
<% for i in yml["derivatives"]["units"]        %>
<%   c = i["ctor"]                             %>
<%   m = i["sym"].match(/(\S+)\s*=\s*(\S+)/)   %>
<%   s = m[1]  # Symbol.                       %>
constexpr auto <%= s %> = impl::<%= s %><float>;

constexpr auto operator"" _<%= s %>(long double v) {
  return float(v)*<%= s %>;
}

<%   for j in i["scales"]                      %>
<%     sc = Scale.new(j).name + c              %>
<%     ss = j + s                              %>
constexpr auto <%= ss %> = impl::<%= ss %><float>;

constexpr auto operator"" _<%= ss %>(long double v) {
  return float(v)*<%= ss %>;
}

<%   end                                       %>
<% end                                         %>
<% for i in yml["derivatives"]["dims"]         %>
using <%= i %>;
<% end                                         %>

} // namespace flt


/// Double-precision dimensions and units.
namespace dbl {

using dyndim = basic_dyndim<double>;

<% for i in yml["basis"]                        %>
<%   c = i["ctor"]                              %>
<%   d = i["dim"] + "_dim"                      %>
<%   p = "basic_statdim<#{d}.encode(), double>" %>
constexpr auto operator"" _<%= i["sym"] %>(long double v) {
  return <%= c %>(double(v));
}

constexpr auto <%= i["sym"] %> = impl::<%= i["sym"] %><double>;
using <%= i["dim"] %> = <%= p %>;

<%   for j in i["scales"]                       %>
<%     sc = Scale.new(j).name + c               %>
<%     ss = j + i["sym"]                        %>
constexpr auto operator"" _<%= ss %>(long double v) {
  return <%= sc %>(double(v));
}

constexpr auto <%= ss %> = impl::<%= ss %><double>;

<%   end                                        %>
<% end                                          %>
<% for i in yml["derivatives"]["units"]         %>
<%   c = i["ctor"]                              %>
<%   m = i["sym"].match(/(\S*)\s*=/)            %>
<%   s = m[1]                                   %>
constexpr auto <%= s %> = impl::<%= s %><double>;

constexpr auto operator"" _<%= s %>(long double v) {
  return double(v)*<%= s %>;
}

<%   for j in i["scales"]                       %>
<%     sc = Scale.new(j).name + c               %>
<%     ss = j + s                               %>
constexpr auto <%= ss %> = impl::<%= ss %><double>;

constexpr auto operator"" _<%= ss %>(long double v) {
  return double(v)*<%= ss %>;
}

<%   end                                        %>
<% end                                          %>
<% for i in yml["derivatives"]["dims"]          %>
using <%= i %>;
<% end                                          %>

} // namespace dbl


/// Extended-precision dimensions and units.
namespace ldbl {

using dyndim = basic_dyndim<long double>;

<% for i in yml["basis"]                             %>
<%   c = i["ctor"]                                   %>
<%   d = i["dim"] + "_dim"                           %>
<%   p = "basic_statdim<#{d}.encode(), long double>" %>
constexpr auto operator"" _<%= i["sym"] %>(long double v) {
  return <%= c %>(v);
}

constexpr auto <%= i["sym"] %> = impl::<%= i["sym"] %><long double>;
using <%= i["dim"] %> = <%= p %>;

<%   for j in i["scales"]                            %>
<%     sc = Scale.new(j).name + c                    %>
<%     ss = j + i["sym"]                             %>
constexpr auto operator"" _<%= ss %>(long double v) {
  return <%= sc %>(v);
}

constexpr auto <%= ss %> = impl::<%= ss %><long double>;

<%   end                                             %>
<% end                                               %>
<% for i in yml["derivatives"]["units"]              %>
<%   c = i["ctor"]                                   %>
<%   m = i["sym"].match(/(\S*)\s*=/)                 %>
<%   s = m[1]                                        %>
constexpr auto <%= s %> = impl::<%= s %><long double>;

constexpr auto operator"" _<%= s %>(long double v) {
  return v*<%= s %>;
}

<%   for j in i["scales"]                            %>
<%     sc = Scale.new(j).name + c                    %>
<%     ss = j + s                                    %>
constexpr auto <%= ss %> = impl::<%= ss %><long double>;

constexpr auto operator"" _<%= ss %>(long double v) {
  return v*<%= ss %>;
}

<%   end                                             %>
<% end                                               %>
<% for i in yml["derivatives"]["dims"]               %>
using <%= i %>;
<% end                                               %>

} // namespace ldbl


} // namespace units
} // namespace vnix

#endif // ndef VNIX_UNITS_HPP
